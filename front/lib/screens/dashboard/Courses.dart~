import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import '../../Controllers/CoursesController.dart';
import '../../Controllers/token_controller.dart';
import '../../constants.dart';
import '../ContactUs/Chat.dart';
import '../Welcome/welcome_screen.dart';
import '../users/GrantsPage/GrantsPage.dart';
import 'ActiveUsersTable.dart';
import 'Dashboard.dart';
import 'FeedbackPage.dart';
import 'Grants.dart';
import 'IdeasPage.dart';
import 'Notifications.dart';
import 'ProjectsPage.dart';
import 'UsersPage.dart';
import 'chatscreen.dart';

class Courses extends StatefulWidget {
  @override
  _CoursesState createState() => _CoursesState();
}

class _CoursesState extends State<Courses> {
  List<Map<String, dynamic>> courses = [];
  final CoursesController _coursesController = CoursesController();
  final companyController = TextEditingController();
  final nameController = TextEditingController();
  final descriptionController = TextEditingController();
  final dateController = TextEditingController();

  @override
  void initState() {
    super.initState();
    fetchCourses(); // جلب الدورات عند بدء الشاشة
  }
  List<dynamic> ideas = [];

  Future<void> fetchCourses() async {
    final savedToken =await token.getToken();
    if (savedToken == null || savedToken.isEmpty) {
      print("Error: Token is null or empty");
      //return {'success': false, 'message': "Authentication token is missing"};
    }
    String tokenWithPrefix = 'token__$savedToken';
    try{
      final response = await http.get(
        Uri.parse('http://$ip:4000/api/v1/EducationalCourse/all'),
        headers: {
          'Content-Type': 'application/json',
          'token': tokenWithPrefix,},
      );

      if (response.statusCode == 200) {
        Map<String, dynamic> jsonResponse = json.decode(response.body);
        setState(() {
          grants = (jsonResponse['getAll'] as List).map((grant) {
            return {
              '_id': grant['_id'],
              'nameOfCompany': grant['nameOfCompany'],  // تعديل هنا
              'nameOfGrant': grant['nameOfGrant'],  // تعديل هنا
              'description': grant['description'],  // تعديل هنا
              'DateOfEndoFGrant': grant['DateOfEndoFGrant'],  // تعديل هنا
            };
          }).toList();
        });

        print("$grants");
      } else {
        // يمكنك إضافة معالجة الأخطاء هنا
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('فشل في جلب البيانات')),
        );
      }} catch (error) {
      print('Error: $error');
      //return {'success': false, 'message': "An error occurred"};
    }
  }




  Future<void> fetchCourses() async {
    try {
      ideas= await _coursesController.getAllCourses();
      setState(() {
        courses = ideas.map((course) {
          return {
            '_id': course['id']?.toString() ?? '',
            'nameOfCompany': course['nameOfCompany']?.toString() ?? '',
            'nameOfEducationalCourse': course['nameOfEducationalCourse']?.toString() ?? '',
            'description': course['description']?.toString() ?? '',
            'DateOfCourse': course['DateOfCourse']?.toString() ?? '',
          };
        }).toList();
      });
    } catch (e) {
      print('Error: $e');
    }
  }

  void _showAddCourseDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text("إضافة دورة جديدة", style: TextStyle(color: Colors.white)),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(15),
          ),
          backgroundColor: Color(0xFF3A3A3A),
          content: SingleChildScrollView(
            child: Container(
              width: 400,
              child: Column(
                children: [
                  _buildTextField(companyController, "اسم الشركة"),
                  SizedBox(height: 10),
                  _buildTextField(nameController, "اسم الدورة"),
                  SizedBox(height: 10),
                  _buildMultilineTextField(descriptionController, "الوصف"),
                  SizedBox(height: 10),
                  _buildTextField(dateController, "تاريخ الدورة"),
                  SizedBox(height: 10),
                ],
              ),
            ),
          ),
          actions: [
            TextButton(
              child: Text("إلغاء", style: TextStyle(color: Colors.white)),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            TextButton(
              child: Text("إضافة", style: TextStyle(color: Colors.white)),
              onPressed: () async {
                addCourse();
                Navigator.pop(context); // العودة للصفحة السابقة

              },
            ),
          ],
        );
      },
    );
  }

  void addCourse() async {
    CoursesController courseController = CoursesController();
    var result = await courseController.addCourse(
      companyController.text,
      nameController.text,
      descriptionController.text,
      dateController.text,
    );

    if (result != null && result['success']) {
      print("Courses added successfully!");
      _showSuccessDialog();
    } else {
      print("Failed to add course: ${result?['message']}");
      Fluttertoast.showToast(
        msg: "Failed to add course: ${result?['message']}",
        toastLength: Toast.LENGTH_LONG,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.red,
        textColor: Colors.white,
        fontSize: 16.0,
      );
    }
  }
  void _showSuccessDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text("Success"),
        content: Text("Course has been added successfully."),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text("OK"),
          ),
        ],
      ),
    );
  }




  Widget _buildTextField(TextEditingController controller, String hint) {
    return TextField(
      controller: controller,
      style: TextStyle(color: Colors.white),
      decoration: InputDecoration(
        hintText: hint,
        hintStyle: TextStyle(color: Colors.white54),
        filled: true,
        fillColor: Color(0xFF4A4A4A),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10),
          borderSide: BorderSide.none,
        ),
      ),
    );
  }

  Widget _buildMultilineTextField(TextEditingController controller, String hint) {
    return TextField(
      controller: controller,
      style: TextStyle(color: Colors.white),
      decoration: InputDecoration(
        hintText: hint,
        hintStyle: TextStyle(color: Colors.white54),
        filled: true,
        fillColor: Color(0xFF4A4A4A),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10),
          borderSide: BorderSide.none,
        ),
      ),
      maxLines: null,
      keyboardType: TextInputType.multiline,
    );
  }

  Widget _buildCoursesTable(BuildContext context) {
    return SingleChildScrollView(
      child: DataTable(
        columns: [
          DataColumn(label: Text('اسم الشركة', style: TextStyle(color: Colors.white))),
          DataColumn(label: Text('اسم الدورة', style: TextStyle(color: Colors.white))),
          DataColumn(label: Text('الوصف', style: TextStyle(color: Colors.white))),
          DataColumn(label: Text('تاريخ الدورة', style: TextStyle(color: Colors.white))),
          DataColumn(label: Text('الإجراءات', style: TextStyle(color: Colors.white))),
        ],
        rows: courses.map<DataRow>((course) {
          return DataRow(cells: [
            DataCell(Text(course['nameOfCompany']!, style: TextStyle(color: Colors.white))),
            DataCell(Text(course['nameOfEducationalCourse']!, style: TextStyle(color: Colors.white))),
            DataCell(Text(course['description']!, style: TextStyle(color: Colors.white))),
            DataCell(Text(course['DateOfCourse']!, style: TextStyle(color: Colors.white))),
            DataCell(Row(
              children: [
                IconButton(
                  icon: Icon(Icons.edit, color: Colors.blue),
                  onPressed: () {
                    _showEditCourseDialog(context, course);
                  },
                ),
                IconButton(
                  icon: Icon(Icons.delete, color: Colors.red),
                  onPressed: () async {
                    await _deleteCourse(course['id']);
                  },
                ),
              ],
            )),
          ]);
        }).toList(),
      ),
    );
  }

  Future<void> _deleteCourse(String id) async {
    print("delete Course : ");
    try {
      await _coursesController.deleteCourse(id);
      // fetchCourses(); // تحديث قائمة الدورات بعد الحذف
    } catch (e) {
      print('Error: $e');
    }
  }

  void _showEditCourseDialog(BuildContext context, Map<String, dynamic> course) {
    // إضافة منطق تعديل الدورة هنا (مشابه للدالة _showAddCourseDialog)
  }

  Widget _buildSidebar(BuildContext context) {
    return Container(
      width: 250,
      color: Color(0xFF4A4A4A),
      child: Column(
        children: [
          SizedBox(height: 70),
          _buildMenuItem(context, "لوحة التحكم", DashboardPage()),
          _buildMenuItem(context, "المستخدمون", UsersPage()),
          _buildMenuItem(context, "المشاريع", ProjectsPage()),
          _buildMenuItem(context, "الأفكار", IdeasPage()),
          _buildMenuItem(context, "الدورات", Courses()),
          _buildMenuItem(context, "أكثر المستخدمين نشاطًا", ActiveUsers()),
          _buildMenuItem(context, "الفيد باك", FeedbackPage()),
          _buildMenuItem(context, "المنح", GrantsPage()),
          _buildMenuItem(context, "الاشعارات", Notifications()),
          _buildMenuItem(context, "الرسائل", ChatScreen()),
        ],
      ),
    );
  }

  Widget _buildMenuItem(BuildContext context, String title, Widget page) {
    return ListTile(
      title: Text(
        title,
        style: TextStyle(color: Colors.white54),
      ),
      onTap: () {
        if (page is WelcomeScreen) {
          TokenController tokenController=TokenController();
          tokenController.logout();
          Navigator.pushAndRemoveUntil(
            context,
            MaterialPageRoute(builder: (context) => page),(route) => false,);
        }
        else{
          Navigator.push(
            context,
            MaterialPageRoute(builder: (context) => page),
          );
        }},
    );
  }


  Widget _buildMainContent(BuildContext context) {
    return Column(
      children: [
        _buildHeader(),
        _buildTitle(),
        _buildAddCourseButton(context),
        SizedBox(height: 20),
        Expanded(child: _buildCoursesTable(context)),
      ],
    );
  }

  Widget _buildTitle() {
    return Container(
      padding: EdgeInsets.all(16.0),
      alignment: Alignment.center,
      child: Text(
        "الدورات",
        style: TextStyle(
          color: Colors.white,
          fontSize: 24,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
      decoration: BoxDecoration(
        color: Color(0xFF2B2B2B),
      ),
      child: Row(
        children: [
          Spacer(),
          _buildSearchBar(),
          SizedBox(width: 20),
          ProfileCard(),
        ],
      ),
    );
  }

  Widget _buildSearchBar() {
    return Container(
      width: 300,
      child: TextField(
        decoration: InputDecoration(
          hintText: "بحث",
          hintStyle: TextStyle(color: Colors.white54),
          fillColor: Color(0xFF4A4A4A),
          filled: true,
          border: OutlineInputBorder(
            borderSide: BorderSide.none,
            borderRadius: BorderRadius.all(Radius.circular(10)),
          ),
          suffixIcon: Container(
            decoration: BoxDecoration(
              color: Colors.green,
              borderRadius: BorderRadius.circular(10),
            ),
            child: IconButton(
              icon: Icon(Icons.search, color: Colors.white54),
              onPressed: () {
                // منطق البحث هنا
              },
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildAddCourseButton(BuildContext context) {
    return Align(
      alignment: Alignment.centerRight,
      child: Padding(
        padding: const EdgeInsets.only(right: 16.0),
        child: GestureDetector(
          onTap: () {
            _showAddCourseDialog(context);
          },
          child: Container(
            width: 120,
            padding: EdgeInsets.all(8.0),
            decoration: BoxDecoration(
              color: Colors.blueAccent,
              borderRadius: BorderRadius.circular(10),
            ),
            child: Center(
              child: Text(
                "إضافة دورة",
                style: TextStyle(color: Colors.white, fontSize: 14),
              ),
            ),
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFF2B2B2B),
      body: Row(
        children: [
          _buildSidebar(context),
          Expanded(child: _buildMainContent(context)),
        ],
      ),
    );
  }
}

class ProfileCard extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Container(
      padding: EdgeInsets.all(8.0),
      decoration: BoxDecoration(
        color: Color(0xFF4A4A4A),
        borderRadius: BorderRadius.circular(10),
      ),
      child: Row(
        children: [
          CircleAvatar(
            backgroundImage: AssetImage("assets/images/defaultpfp.jpg"),
            radius: 19,
          ),
          SizedBox(width: 10.0),
          Text(
            "اسم الادمن",
            style: TextStyle(
              color: Colors.white,
              fontSize: 16,
            ),
          ),
        ],
      ),
    );
  }
}